/*
 * System call prototypes for rump.
 * DO NOT EDIT-- this file is automatically generated.
 */

struct pollfd;
struct epoll_event;
struct msghdr;
struct mmsghdr;
struct user_msghdr;
struct iovec;
struct sockaddr;
struct timeval;
struct timespec;
struct stat64;
struct statfs64;
struct utimbuf;
struct sigaction;
struct rlimit;

#include <linux/types.h>

#ifndef umode_t
typedef unsigned short		umode_t;
#endif /* umode_t */

#ifndef size_t
typedef __kernel_size_t		size_t;
#endif

#ifndef __dead
#define __dead __attribute__((__noreturn__))
#endif

#ifndef __printflike
#ifdef __GNUC__
#define __printflike(a,b) __attribute__((__format__ (__printf__,a,b)))
#else
#define __printflike(a,b)
#endif
#endif

#ifndef loff_t
typedef long long      loff_t;
#endif /* loff_t */
typedef int            clockid_t;
typedef unsigned long          u_long;
typedef unsigned int           u_int;
#define RUMP_REGISTER_T long
typedef RUMP_REGISTER_T register_t;
typedef int            pid_t;

#ifndef uid32_t
typedef unsigned int	uid32_t;
typedef unsigned int	gid32_t;
#endif

long rump___sysimpl_getpid(void);
long rump_sys_getpid(void) __asm("rump___sysimpl_getpid");
long rump___sysimpl_write(unsigned int fd, const char * buf, size_t count);
long rump_sys_write(unsigned int fd, const char * buf, size_t count) __asm("rump___sysimpl_write");
long rump___sysimpl_close(unsigned int fd);
long rump_sys_close(unsigned int fd) __asm("rump___sysimpl_close");
long rump___sysimpl_unlink(const char * pathname);
long rump_sys_unlink(const char * pathname) __asm("rump___sysimpl_unlink");
long rump___sysimpl_open(const char * filename, int flags, umode_t mode);
long rump_sys_open(const char * filename, int flags, umode_t mode) __asm("rump___sysimpl_open");
long rump___sysimpl_creat(const char * filename, umode_t mode);
long rump_sys_creat(const char * filename, umode_t mode) __asm("rump___sysimpl_creat");
long rump___sysimpl_poll(void * ufds, unsigned int nfds, int timeout);
long rump_sys_poll(void * ufds, unsigned int nfds, int timeout) __asm("rump___sysimpl_poll");
long rump___sysimpl_read(unsigned int fd, char * buf, size_t count);
long rump_sys_read(unsigned int fd, char * buf, size_t count) __asm("rump___sysimpl_read");
long rump___sysimpl_rename(const char * oldname, const char * newname);
long rump_sys_rename(const char * oldname, const char * newname) __asm("rump___sysimpl_rename");
long rump___sysimpl_flock(unsigned int fd, unsigned int cmd);
long rump_sys_flock(unsigned int fd, unsigned int cmd) __asm("rump___sysimpl_flock");
long rump___sysimpl_chmod(const char * filename, umode_t mode);
long rump_sys_chmod(const char * filename, umode_t mode) __asm("rump___sysimpl_chmod");
long rump___sysimpl_mkdir(const char * pathname, umode_t mode);
long rump_sys_mkdir(const char * pathname, umode_t mode) __asm("rump___sysimpl_mkdir");
long rump___sysimpl_rmdir(const char * pathname);
long rump_sys_rmdir(const char * pathname) __asm("rump___sysimpl_rmdir");
long rump___sysimpl_getdents64(unsigned int fd, void * dirent, unsigned int size);
long rump_sys_getdents64(unsigned int fd, void * dirent, unsigned int size) __asm("rump___sysimpl_getdents64");
long rump___sysimpl_utimes(const char * filename, struct timeval * utimes);
long rump_sys_utimes(const char * filename, struct timeval * utimes) __asm("rump___sysimpl_utimes");
long rump___sysimpl_nanosleep(struct timespec * rqtp, struct timespec * rmtp);
long rump_sys_nanosleep(struct timespec * rqtp, struct timespec * rmtp) __asm("rump___sysimpl_nanosleep");
long rump___sysimpl_mknod(const char * filename, umode_t mode, unsigned int dev);
long rump_sys_mknod(const char * filename, umode_t mode, unsigned int dev) __asm("rump___sysimpl_mknod");
long rump___sysimpl_mount(const char * dev_name, const char * dir_name, const char * type, unsigned long flags, void * data);
long rump_sys_mount(const char * dev_name, const char * dir_name, const char * type, unsigned long flags, void * data) __asm("rump___sysimpl_mount");
long rump___sysimpl_umount(const char * name, int flags);
long rump_sys_umount(const char * name, int flags) __asm("rump___sysimpl_umount");
long rump___sysimpl_chdir(const char * filename);
long rump_sys_chdir(const char * filename) __asm("rump___sysimpl_chdir");
long rump___sysimpl_chroot(const char * filename);
long rump_sys_chroot(const char * filename) __asm("rump___sysimpl_chroot");
long rump___sysimpl_getcwd(char * buf, unsigned long size);
long rump_sys_getcwd(char * buf, unsigned long size) __asm("rump___sysimpl_getcwd");
long rump___sysimpl_utime(const char * filename, const struct utimbuf * buf);
long rump_sys_utime(const char * filename, const struct utimbuf * buf) __asm("rump___sysimpl_utime");
long rump___sysimpl_ioctl(unsigned int fd, unsigned int cmd, unsigned long arg);
long rump_sys_ioctl(unsigned int fd, unsigned int cmd, unsigned long arg) __asm("rump___sysimpl_ioctl");
long rump___sysimpl_umask(int mask);
long rump_sys_umask(int mask) __asm("rump___sysimpl_umask");
long rump___sysimpl_getuid(void);
long rump_sys_getuid(void) __asm("rump___sysimpl_getuid");
long rump___sysimpl_getgid(void);
long rump_sys_getgid(void) __asm("rump___sysimpl_getgid");
long rump___sysimpl_access(const char * filename, int mode);
long rump_sys_access(const char * filename, int mode) __asm("rump___sysimpl_access");
long rump___sysimpl_truncate(const char * path, long length);
long rump_sys_truncate(const char * path, long length) __asm("rump___sysimpl_truncate");
long rump___sysimpl_sync(void);
long rump_sys_sync(void) __asm("rump___sysimpl_sync");
long rump___sysimpl_llseek(unsigned int fd, unsigned long offset_high, unsigned long offset_low, loff_t * result, unsigned int whence);
long rump_sys_llseek(unsigned int fd, unsigned long offset_high, unsigned long offset_low, loff_t * result, unsigned int whence) __asm("rump___sysimpl_llseek");
long rump___sysimpl_fstat64(unsigned long fd, struct stat64 * statbuf);
long rump_sys_fstat64(unsigned long fd, struct stat64 * statbuf) __asm("rump___sysimpl_fstat64");
long rump___sysimpl_fstatat64(unsigned int dfd, const char * filname, struct stat64 * statbuf, int flag);
long rump_sys_fstatat64(unsigned int dfd, const char * filname, struct stat64 * statbuf, int flag) __asm("rump___sysimpl_fstatat64");
long rump___sysimpl_stat64(const char * filename, struct stat64 * statbuf);
long rump_sys_stat64(const char * filename, struct stat64 * statbuf) __asm("rump___sysimpl_stat64");
long rump___sysimpl_lstat64(const char * filename, struct stat64 * statbuf);
long rump_sys_lstat64(const char * filename, struct stat64 * statbuf) __asm("rump___sysimpl_lstat64");
long rump___sysimpl_statfs64(const char * path, size_t sz, struct statfs64 * buf);
long rump_sys_statfs64(const char * path, size_t sz, struct statfs64 * buf) __asm("rump___sysimpl_statfs64");
long rump___sysimpl_readlink(const char * path, char * buf, int bufsiz);
long rump_sys_readlink(const char * path, char * buf, int bufsiz) __asm("rump___sysimpl_readlink");
long rump___sysimpl_listxattr(const char * path, char * list, int bufsiz);
long rump_sys_listxattr(const char * path, char * list, int bufsiz) __asm("rump___sysimpl_listxattr");
long rump___sysimpl_llistxattr(const char * path, char * list, int bufsiz);
long rump_sys_llistxattr(const char * path, char * list, int bufsiz) __asm("rump___sysimpl_llistxattr");
long rump___sysimpl_flistxattr(int fd, char * list, int bufsiz);
long rump_sys_flistxattr(int fd, char * list, int bufsiz) __asm("rump___sysimpl_flistxattr");
long rump___sysimpl_getxattr(const char * path, const char * name, void * value, size_t size);
long rump_sys_getxattr(const char * path, const char * name, void * value, size_t size) __asm("rump___sysimpl_getxattr");
long rump___sysimpl_lgetxattr(const char * path, const char * name, void * value, size_t size);
long rump_sys_lgetxattr(const char * path, const char * name, void * value, size_t size) __asm("rump___sysimpl_lgetxattr");
long rump___sysimpl_fgetxattr(int fd, const char * name, void * value, size_t size);
long rump_sys_fgetxattr(int fd, const char * name, void * value, size_t size) __asm("rump___sysimpl_fgetxattr");
long rump___sysimpl_setxattr(const char * path, const char * name, const void * value, size_t size, int flags);
long rump_sys_setxattr(const char * path, const char * name, const void * value, size_t size, int flags) __asm("rump___sysimpl_setxattr");
long rump___sysimpl_lsetxattr(const char * path, const char * name, const void * value, size_t size, int flags);
long rump_sys_lsetxattr(const char * path, const char * name, const void * value, size_t size, int flags) __asm("rump___sysimpl_lsetxattr");
long rump___sysimpl_fsetxattr(int fd, const char * name, const void * value, size_t size, int flags);
long rump_sys_fsetxattr(int fd, const char * name, const void * value, size_t size, int flags) __asm("rump___sysimpl_fsetxattr");
long rump___sysimpl_symlink(const char * oldname, const char * newname);
long rump_sys_symlink(const char * oldname, const char * newname) __asm("rump___sysimpl_symlink");
long rump___sysimpl_link(const char * oldname, const char * newname);
long rump_sys_link(const char * oldname, const char * newname) __asm("rump___sysimpl_link");
long rump___sysimpl_chown(const char * filename, uid32_t uid, gid32_t gid);
long rump_sys_chown(const char * filename, uid32_t uid, gid32_t gid) __asm("rump___sysimpl_chown");
long rump___sysimpl_pread64(unsigned int fd, char * buf, size_t count, loff_t pos);
long rump_sys_pread64(unsigned int fd, char * buf, size_t count, loff_t pos) __asm("rump___sysimpl_pread64");
long rump___sysimpl_pwrite64(unsigned int fd, const char * buf, size_t count, loff_t pos);
long rump_sys_pwrite64(unsigned int fd, const char * buf, size_t count, loff_t pos) __asm("rump___sysimpl_pwrite64");
long rump___sysimpl_fsync(unsigned int fd);
long rump_sys_fsync(unsigned int fd) __asm("rump___sysimpl_fsync");
long rump___sysimpl_fdatasync(unsigned int fd);
long rump_sys_fdatasync(unsigned int fd) __asm("rump___sysimpl_fdatasync");
long rump___sysimpl_removexattr(const char * path, const char * name);
long rump_sys_removexattr(const char * path, const char * name) __asm("rump___sysimpl_removexattr");
long rump___sysimpl_utimensat(int dirfd, const char * path, struct timespec * utimes, int flags);
long rump_sys_utimensat(int dirfd, const char * path, struct timespec * utimes, int flags) __asm("rump___sysimpl_utimensat");
long rump___sysimpl_fallocate(int fd, int mode, loff_t offset, loff_t len);
long rump_sys_fallocate(int fd, int mode, loff_t offset, loff_t len) __asm("rump___sysimpl_fallocate");
long rump___sysimpl_socket(int family, int type, int protocol);
long rump_sys_socket(int family, int type, int protocol) __asm("rump___sysimpl_socket");
long rump___sysimpl_recvmsg(int fd, struct msghdr * msg, unsigned int flags);
long rump_sys_recvmsg(int fd, struct msghdr * msg, unsigned int flags) __asm("rump___sysimpl_recvmsg");
long rump___sysimpl_recvfrom(int fd, void * ubuf, size_t size, unsigned int flags, struct sockaddr * addr, int * addr_len);
long rump_sys_recvfrom(int fd, void * ubuf, size_t size, unsigned int flags, struct sockaddr * addr, int * addr_len) __asm("rump___sysimpl_recvfrom");
long rump___sysimpl_sendto(int fd, void * buff, size_t len, unsigned int flags, struct sockaddr * addr, int addr_len);
long rump_sys_sendto(int fd, void * buff, size_t len, unsigned int flags, struct sockaddr * addr, int addr_len) __asm("rump___sysimpl_sendto");
long rump___sysimpl_sendmsg(int fd, struct msghdr * msg, unsigned int flags);
long rump_sys_sendmsg(int fd, struct msghdr * msg, unsigned int flags) __asm("rump___sysimpl_sendmsg");
long rump___sysimpl_sendmmsg(int fd, struct mmsghdr * mmsg, unsigned int vlen, unsigned int flags);
long rump_sys_sendmmsg(int fd, struct mmsghdr * mmsg, unsigned int vlen, unsigned int flags) __asm("rump___sysimpl_sendmmsg");
long rump___sysimpl_getsockname(int fd, struct sockaddr * usockaddr, void * usockaddr_len);
long rump_sys_getsockname(int fd, struct sockaddr * usockaddr, void * usockaddr_len) __asm("rump___sysimpl_getsockname");
long rump___sysimpl_getpeername(int fd, struct sockaddr * usockaddr, int * usockaddr_len);
long rump_sys_getpeername(int fd, struct sockaddr * usockaddr, int * usockaddr_len) __asm("rump___sysimpl_getpeername");
long rump___sysimpl_setsockopt(int fd, int level, int optname, void * optval, int optlen);
long rump_sys_setsockopt(int fd, int level, int optname, void * optval, int optlen) __asm("rump___sysimpl_setsockopt");
long rump___sysimpl_getsockopt(int fd, int level, int optname, char * optval, int * optlen);
long rump_sys_getsockopt(int fd, int level, int optname, char * optval, int * optlen) __asm("rump___sysimpl_getsockopt");
long rump___sysimpl_bind(int fd, struct sockaddr * umyaddr, int addrlen);
long rump_sys_bind(int fd, struct sockaddr * umyaddr, int addrlen) __asm("rump___sysimpl_bind");
long rump___sysimpl_connect(int fd, struct sockaddr * uservaddr, int addrlen);
long rump_sys_connect(int fd, struct sockaddr * uservaddr, int addrlen) __asm("rump___sysimpl_connect");
long rump___sysimpl_listen(int fd, int backlog);
long rump_sys_listen(int fd, int backlog) __asm("rump___sysimpl_listen");
long rump___sysimpl_accept(int fd, struct sockaddr * upeer_sockaddr, int * upeer_addrlen);
long rump_sys_accept(int fd, struct sockaddr * upeer_sockaddr, int * upeer_addrlen) __asm("rump___sysimpl_accept");
long rump___sysimpl_writev(unsigned long fd, const struct iovec * vec, unsigned long vlen);
long rump_sys_writev(unsigned long fd, const struct iovec * vec, unsigned long vlen) __asm("rump___sysimpl_writev");
long rump___sysimpl_fcntl(unsigned int fd, unsigned int cmd, unsigned long arg);
long rump_sys_fcntl(unsigned int fd, unsigned int cmd, unsigned long arg) __asm("rump___sysimpl_fcntl");
long rump___sysimpl_select(int n, void * inp, void * outp, void * exp, struct timeval * tvp);
long rump_sys_select(int n, void * inp, void * outp, void * exp, struct timeval * tvp) __asm("rump___sysimpl_select");
long rump___sysimpl_epoll_create(int size);
long rump_sys_epoll_create(int size) __asm("rump___sysimpl_epoll_create");
long rump___sysimpl_epoll_ctl(int epfd, int op, int fd, struct epoll_event * event);
long rump_sys_epoll_ctl(int epfd, int op, int fd, struct epoll_event * event) __asm("rump___sysimpl_epoll_ctl");
long rump___sysimpl_epoll_wait(int epfd, struct epoll_event * events, int maxevents, int timeout);
long rump_sys_epoll_wait(int epfd, struct epoll_event * events, int maxevents, int timeout) __asm("rump___sysimpl_epoll_wait");
long rump___sysimpl_shutdown(int fd, int how);
long rump_sys_shutdown(int fd, int how) __asm("rump___sysimpl_shutdown");
long rump___sysimpl_pipe(int * fildes);
long rump_sys_pipe(int * fildes) __asm("rump___sysimpl_pipe");
long rump___sysimpl_getrlimit(unsigned int resource, struct rlimit * rlim);
long rump_sys_getrlimit(unsigned int resource, struct rlimit * rlim) __asm("rump___sysimpl_getrlimit");
long rump___sysimpl_reboot(int magic1, int magic2, unsigned int cmd, void * arg);
long rump_sys_reboot(int magic1, int magic2, unsigned int cmd, void * arg) __asm("rump___sysimpl_reboot");
